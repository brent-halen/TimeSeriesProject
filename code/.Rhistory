theme(axis.text.x = element_text(angle = 45,
hjust = 1)) + xlab("Weather Type") +
ggtitle("The top 10 weather events\nby property damages")
# Plot 2
cropplot <- qplot(EVTYPE, data = cropdamage, weight = TOTALCROPDAMAGE, geom = "bar", fill = I("green")) + xlim("HURRICANE", "HURRICANE/TYPHOON", "FLOOD", "FLASH FLOOD", "TORNADO", "HAIL", "HIRRICANE OPAL/HIGH WINDS", "TSTM WIND", "HIGH WIND", "WILDFIRE") +
scale_y_continuous("Crop Damage") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) + xlab("Weather Type") +
ggtitle("The top 10 weather events\nby crop damage"),
grid.arrange(propertyplot, cropplot, ncol = 2)
# Plot 1
propertyplot <- qplot(EVTYPE, data = propdamage, weight = TOTALPROPDAMAGE, geom = "bar", fill = I("black")) + xlim("FLOOD", "HURRICANE/TYPHOON", "TORNADO", "STORM SURGE", "FLASH FLOOD", "HAIL", "HURRICANE", "TROPICAL STORM", "WINTER STORM", "HIGH WIND") +
scale_y_continuous("Property Damage") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) + xlab("Weather Type") +
ggtitle("The top 10 weather events\nby property damage")
# Plot 2
cropplot <- qplot(EVTYPE, data = cropdamage, weight = TOTALCROPDAMAGE, geom = "bar", fill = I("green")) + xlim("HURRICANE", "HURRICANE/TYPHOON", "FLOOD", "FLASH FLOOD", "TORNADO", "HAIL", "HIRRICANE OPAL/HIGH WINDS", "TSTM WIND", "HIGH WIND", "WILDFIRE") +
scale_y_continuous("Crop Damage") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) + xlab("Weather Type") +
ggtitle("The top 10 weather events\nby crop damage")
grid.arrange(propertyplot, cropplot, ncol = 2)
View(cropdamage)
View(cropdamage)
View(propdamage)
View(cropdamage)
# Install (if not already present) and load the ggplot2 package
require(ggplot2)
# set the seed for random number generator.
set.seed(667)
# set lambda, n, and number of simulations to the 'lambda', 'n', and 'numofsims' variables respectively.
lambda <- 0.2
n <- 40
numofsims <- 1000
# Define a function that will nest the 'rexp' function within the 'mean' function. This will allow us to more easily generate an indexed data frame of the 1000 simulations.
mean_rexp <- function(n, lambda)
{
mean(rexp(n, lambda))
}
#declare 'simulation' variable as a data frame with 2 columns and 1000 rows.
simulation <- data.frame(ncol=2,nrow=1000)
names(simulation) <- c("Index", "Mean")
for (i in 1:numofsims)
{
simulation[i,1] <- i
simulation[i,2] <- mean_rexp(n,lambda)
}
sample_mean <- mean(simulation$Mean)
theoretical_mean <- 1/lambda
print(sample_mean)
print(theoretical_mean)
print((theoretical_mean - sample_mean))
```{r}
hist(means, col="red", main = "Distribution of Means")
abline(v = sample_mean, col = 2, lwd = 2)
abline(v = theoretical_mean, col = 1, lwd = 2)
hist(simulation, col="red", main = "Distribution of Means")
abline(v = sample_mean, col = 2, lwd = 2)
abline(v = theoretical_mean, col = 1, lwd = 2)
hist(simulation$Mean, col="red", main = "Distribution of Means")
abline(v = sample_mean, col = 2, lwd = 2)
abline(v = theoretical_mean, col = 1, lwd = 2)
hist(simulation$Mean, col="red", main = "Distribution of Means")
abline(v = sample_mean, col = 3, lwd = 2)
abline(v = theoretical_mean, col = 1, lwd = 2)
hist(simulation$Mean, col="red", main = "Distribution of Means", xlab = "Mean values")
abline(v = sample_mean, col = 3, lwd = 2)
abline(v = theoretical_mean, col = 1, lwd = 2)
hist(simulation$Mean, col="Green", main = "Distribution of Means", xlab = "Mean values")
abline(v = sample_mean, col = "Red", lwd = 2)
abline(v = theoretical_mean, col = "Black", lwd = 2)
hist(simulation$Mean, col="Green", main = "Distribution of Means", xlab = "Mean values")
abline(v = sample_mean, col = "Red", lwd = 2)
abline(v = theoretical_mean, col = "Black", lwd = 2)
legend('topright', c("Theoretical Mean", "Sample Mean"), bty = "n", lty = c(1,1), col = c(col = "Black", col = "Red"))
hist(simulation$Mean, breaks = 25, col="Green", main = "Distribution of Means", xlab = "Mean values")
abline(v = sample_mean, col = "Red", lwd = 2)
abline(v = theoretical_mean, col = "Black", lwd = 2)
legend('topright', c("Theoretical Mean", "Sample Mean"), bty = "n", lty = c(1,1), col = c(col = "Black", col = "Red"))
var(simulation$Mean)*n
# Assign theoretical variance value to 'theoretical_variance' variable.
theoretical_variance <- 25
# Calculate sample variance and assign value to 'sample_variance' variable.
sample_variance <- (var(simulation$Mean)*n)
print(theoretical_variance)
print(sample_variance)
print((theoretical_variance-sample_variance))
figure <- ggplot(simulation$Mean)
figure <- ggplot(data.frame(x=simulation$Mean))
figure <- ggplot(data.frame(x=simulation$Mean))
print(figure)
figure <- ggplot(data.frame(x=simulation$Mean), aes(x = x))
print(figure)
ggplot(data.frame(simulation))
ggplot(data.frame(simulation))
ggplot(data.frame(simulation), aes(x = simulation$Mean))
ggplot(data.frame(simulation), aes(x = simulation$Mean)) + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.5, aes(y = ..density..))
ggplot(data.frame(simulation), aes(x = simulation$Mean)) + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y = ..density..))
figure <- ggplot(data.frame(simulation), aes(x = "Sample Means"))
+ geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y = "Frequency"))
+ stat_function(fun = dnorm, colour = "red", args = list(mean=5))
+ labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = "Sample Means")) + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y = "Frequency")) + stat_function(fun = dnorm, colour = "red", args = list(mean=5)) + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = "Sample Means")) + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25) + stat_function(fun = dnorm, colour = "red", args = list(mean=5)) + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = "Sample Means")) + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y= ..filler..)) + stat_function(fun = dnorm, colour = "red", args = list(mean=5)) + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = "Sample Means"))
figure <- figure + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y= ..filler..))
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = x))
figure <- figure + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y= ..density..))
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = simulation$Mean))
figure <- figure + geom_histogram(position = "identity", fill = "blue", color = "black", alpha = 0.2, binwidth = 0.25, aes(y= ..density..))
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
print(figure)
figure <- ggplot(data.frame(simulation), aes(x = simulation$Mean))
figure <- figure + geom_histogram(position = "identity", fill = "green", color = "black", alpha = 0.2, binwidth = 0.2, aes(y= ..density..))
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
figure <- figure + labs(x = "Sample Means", y = "Frequency or # of Occurences")
print(figure)
hist(simulation$Mean, breaks = 25, col="Green", main = "Distribution of Means", xlab = "Mean values")
abline(v = sample_mean, col = "Red", lwd = 2)
abline(v = theoretical_mean, col = "Black", lwd = 2)
legend('topright', c("Theoretical Mean", "Sample Mean"), bty = "n", lty = c(1,1), col = c(col = "Black", col = "Red"))
figure <- ggplot(data.frame(simulation), aes(x = simulation$Mean))
figure <- figure + geom_histogram(position = "identity", fill = "green", color = "black", alpha = 0.2, binwidth = 0.2, aes(y= ..density..))
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
figure <- figure + labs(x = "Sample Means", y = "Frequency or # of Occurences")
print(figure)
# Generate base plot.
figure <- ggplot(data.frame(simulation), aes(x = simulation$Mean))
# Generate a histogram of the sample means.
figure <- figure + geom_histogram(position = "identity", fill = "green", color = "black", alpha = 0.2, binwidth = 0.2, aes(y= ..occurrence..))
# Add a line that represents a normal distribution where the mean is 5.
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
# Add a title for the figure.
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
# Add labels for x and y axes.
figure <- figure + labs(x = "Sample Means", y = "Frequency or # of Occurences")
# Print the figure.
print(figure)
# Generate base plot.
figure <- ggplot(data.frame(simulation), aes(x = simulation$Mean))
# Generate a histogram of the sample means.
figure <- figure + geom_histogram(position = "identity", fill = "green", color = "black", alpha = 0.2, binwidth = 0.2, aes(y= ..density..))
# Add a line that represents a normal distribution where the mean is 5.
figure <- figure + stat_function(fun = dnorm, colour = "red", args = list(mean=5))
# Add a title for the figure.
figure <- figure + labs(title = "Distribution of the Sample Means VS a Normal Distribution")
# Add labels for x and y axes.
figure <- figure + labs(x = "Sample Means", y = "Frequency or # of Occurences")
# Print the figure.
print(figure)
qqnorm(simulation$Mean)
qqnorm(simulation$Mean); qqline(simulation$Mean, lwd=3)
qqnorm(simulation$Mean,col="green"); qqline(simulation$Mean, lwd=3)
qqnorm(simulation$Mean,col="green")
qqline(simulation$Mean, lwd=3)
require(pdflatex)
install("pdflatex")
install.packages("pdflatex")
install.packages("pdftex")
require(knitr)
require(knitr)
require("knitr")
install.packages('knitr')
require('knitr')
require('ggplot2')
install.packages('ggplot2')
library('knitr')
library('knitr')
install.packages('rmarkdown')
q()
install.packages('nnet')
require(nnet)
install.packages("reshape2")
install.packages("pacman")
library(pacman)
install.packages('plotly')
library(tseries)
app1 <- get.hist.quote(instrument=''aapl'',start=''1985-01-01'',end=''2016-08-31'',
+ quote=''AdjClose'',compression=''m'')
app1 <- get.hist.quote(instrument=''aapl'',start=''1985-01-01'',end=''2016-08-31'',quote=''AdjClose'',compression=''m'')
app1 <- get.hist.quote(instrument='aapl',start='1985-01-01',end='2016-08-31',quote='AdjClose',compression='m')
plot(app1,main=''Historical Stock Prices: Apple Corporation'')
abline(v=as.Date(``1990-07-01''),col=''red'')
abline(v=as.Date(``1991-03-01''),col=''red'')
abline(v=as.Date(``2007-12-01''),col=''blue'')
abline(v=as.Date(``2009-06-01''),col=''blue'')
plot(app1,main='Historical Stock Prices: Apple Corporation')
abline(v=as.Date('1990-07-01'),col='red')
abline(v=as.Date('1991-03-01'),col='red')
abline(v=as.Date('2007-12-01'),col='blue')
abline(v=as.Date('2009-06-01'),col='blue')
bc2(app1)
library(MASS)
source("bc2.R")
bc2(app1)
app2 <- app1^(-0.2)
bulkfit(app2)
source("bulkfit.R")
bulkfit(app2)
app2.fit <- arima(app2,order=c(1,1,0))
app2.fit
library(ggplot2)
library(xts)
library(reshape2)
library(zoo)
# Downloads the 'bc2.R' file.
download.file("https://raw.githubusercontent.com/brent-halen/TSProject2016/master/bc2.R", destfile = "bc2.R", method = "libcurl")
source("bc2.R")
# Downloads 'decom1.R'
download.file("https://raw.githubusercontent.com/brent-halen/TSProject2016/master/decom1.R",destfile="decom1.R", method="libcurl")
source("decom1.R")
# Downloads the 'bulkfit.R' file.
download.file("https://raw.githubusercontent.com/brent-halen/TSProject2016/master/bulkfit.R",destfile="bulkfit.R",method="libcurl")
source("bulkfit.R")
# The following is an upgraded version of 'Bulkfit' designed to test seasonal ARIMA models as well as stationary.
# ###WARNING###
# This modification will cause the function to test 729 models instead of just 27. It may take a while to complete.
bulkfit2 <- function(x,y) {
w <- matrix(0,nrow=729,ncol=7)
ii <- 0
for(i in 0:2) {
for(k in 0:2) {
for(j in 0:2) {
for(I in 0:2){
for(K in 0:2){
for(J in 0:2){
ii <- ii + 1
fit <- try(arima(x,order=c(i,k,j),seasonal= list(order=c(I,K,J),period=y)))
if(inherits(fit,"try-error")) {
w[ii,7] <- 99999
}
else {
w[ii,7] <- fit$aic
w[ii,1] <- i
w[ii,2] <- k
w[ii,3] <- j
w[ii,4] <- I
w[ii,5] <- K
w[ii,6] <- J
}
}
}
}
}
}
}
dimnames(w) <- list(NULL,c("ar","d","ma","seasar","seasd","seasma","AIC"))
xxx <- which(w[,7]==min(w[,7],na.rm=TRUE))[1]
return(list(res=w,min=w[xxx,]))
}
library(forecast)
library(MASS)
library(quadprog)
# Downloads the final file from the web site.
link <- "https://raw.githubusercontent.com/brent-halen/TSProject2016/master/reviews.csv"
reviews <- "reviews.csv"
download.file(link, destfile = reviews, method = "libcurl")
#yelp =  read.zoo(file = reviews, sep = "," , FUN = as.yearmon)
yelp <- read.csv(file = reviews, header = TRUE)
yelp <- as.data.frame(yelp)
yelp_forzoo <- yelp
yelp_forzoo$reviewDate <- as.yearmon(yelp_forzoo$reviewDate)
yelp <- zoo(yelp_forzoo$reviews,yelp_forzoo$reviewDate)
plot.ts(yelp)
yelp.ts <- as.ts(yelp)
bc2(yelp.ts,ploty=TRUE)
#bc2(yelp.zoo,ploty=TRUE)
#0.3838384
#yelp.tr1 <- yelp
#yelp.tr1$reviews = yelp.tr1$reviews^(383/1000)
yelp.tr = yelp.ts^(383/1000)
yelp.bulkfit <- bulkfit(yelp.tr)
# 1.0000   2.0000   2.0000 516.3467
yelp.bulkfit2 <- bulkfit2(yelp.tr,12)
# 0.0000   1.0000   2.0000  0.0000  1.0000  2.0000  361.69
yelp.bulkfit
yelp.bulkfit2
yelp.tr.fit = arima(yelp.tr,order =c(1,2,2))
yelp.tr.fit2 <- arima(yelp.tr, order = c(0,1,2),seasonal = list(order=c(0,1,2),period=12))
yelp.tr.fit
#Coefficients:
#         ar1      ma1     ma2
#      0.5384  -1.9144  0.9144
#s.e.   0.1318   0.1004  0.0993
#sigma^2 estimated as 2.596:  log likelihood = -254.17,  aic = 516.35
yelp.tr.fit2
# Call:
# arima(x = yelp.tr, order = c(0, 1, 2), seasonal = list(order = c(0, 1, 2), period = 12))
#
# Coefficients:
#           ma1      ma2     sma1    sma2
#       -0.1155  -0.2259  -0.6475  0.1870
# s.e.   0.0907   0.0884   0.1093  0.1181
#
# sigma^2 estimated as 1.021:  log likelihood = -175.85,  aic = 361.69
yelp.tr.pred = predict(yelp.tr.fit, n.ahead=12)
yelp.tr.pred2 = predict(yelp.tr.fit2, n.ahead=12)
length(yelp)
#134
Lower = yelp.tr.pred$pred - 1.96*yelp.tr.pred$se/sqrt(134)
Lower2 = yelp.tr.pred2$pred - 1.96*yelp.tr.pred2$se/sqrt(134)
Upper = yelp.tr.pred$pred + 1.96*yelp.tr.pred$se/sqrt(134)
Upper2 = yelp.tr.pred2$pred + 1.96*yelp.tr.pred2$se/sqrt(134)
Predict = yelp.tr.pred$pred
Predict2 = yelp.tr.pred2$pred
pred.mat = cbind(Lower,Predict,Upper)
pred2.mat = cbind(Lower2,Predict2,Upper2)
final.mat = pred.mat^(1000/383)
final2.mat = pred2.mat^(1000/383)
final.mat
final2.mat
######decom
yelp.dec = decom1(yelp,fore1 =12,se1 =12)
yelp.dec.final = yelp.dec$pred.df
yelp.dec.final
#######using forecast to make plot
fit_ar = arima(yelp, order= c(1,2,2))
fit_ar2 = arima(yelp, order = c(0,1,2),seasonal = list(order=c(0,1,2),period=12))
fit_ar_f = forecast(fit_ar, h =12)
fit_ar_f2 = forecast(fit_ar2,h=12)
plot(fit_ar_f, include =100)
plot(fit_ar_f2,include=100)
install.packages('xtable')
xtable(yelp.tr.pred2)
library(xtable)
xtable(yelp.tr.pred2)
xtable(as.data.frame(yelp.tr.pred2))
display(xtable(as.data.frame(yelp.tr.pred2)))
xtable(as.data.frame(yelp.tr.pred2))
yelp.tr.pred2
xtable(final2.mat)
yelp.bulkfit <- bulkfit(yelp.tr)
# 1.0000   2.0000   2.0000 516.3467
yelp.bulkfit2 <- bulkfit2(yelp.tr,12)
yelp.bulkfit
rmarkdown::render("tsproject2016.Rmd")
list.files9)
list.files())
list.files()
setwd("G:/")
list.files()
setwd("Github")
list.files()
setwd("TimeSeriesProject")
list.files()
setwd("code")
list.files()
rmarkdown::render("tsproject2016.Rmd")
rmarkdown::render("tsproject2016.Rmd")
rmarkdown::render("tsproject2016.Rmd")
knitr::knit("tsproject2016.Rmd")
knit_with_parameters('G:/Github/TimeSeriesProject/code/tsproject2016.Rmd')
save.image()
list.files()
?save.image
save.image(file="image.Rdata")
list.files()
xtable(final2.mat)
install.packages('tables')
library(tables)
booktabs(pred2.mat)
booktabs(as.data.frame(pred2.mat))
pred2.mat
table <- booktabs(pred2.mat)
table$toprule
latex(table)
tabular(pred2.mat)
booktabs()
latex(pred2.mat)
as.table(pred2.mat)
library(xtable)
print(xtable(pred2.mat))
print(xtable(pred2.mat),type = "html")
?kable
library(knitr)
kable(pred2.mat)
kable(pred2.mat,format="markdown")
saveRDS(yelp.bulkfit,file="yelp.bulkfit")
saveRDS(yelp.bulkfit2,file="yelp.bulkfit2")
list.files()
download.file("https://github.com/brent-halen/TSProject2016/blob/master/yelp.bulkfit?raw=true",destfile="yelp.bulkfit.test", method="libcurl")
test <- readRDS("yelp.bulkfit.test"
)
?download.file
download.file("https://github.com/brent-halen/TSProject2016/blob/master/yelp.bulkfit?raw=true",destfile="yelp.bulkfit.test", method="libcurl",mode="wb")
test <- readRDS("yelp.bulkfit.test"
)
#load(file="image.Rdata")
library(mgcv)
download.file("https://github.com/brent-halen/TSProject2016/blob/master/yelp.bulkfit?raw=true",destfile="yelp.bulkfit.test", method="libcurl",mode = "wb")
yelp.bulkfit <- readRDS("yelp.bulkfit")
download.file("https://github.com/brent-halen/TSProject2016/blob/master/yelp.bulkfit2?raw=true",destfile="yelp.bulkfit2",method="libcurl",mode = "wb")
yelp.bulkfit2 <- readRDS("yelp.bulkfit2")
yelp.bulkfit2
ggplot(fit_ar_f)
fit_ar_f
first <- ggplot(data=yelp)
first
yelp
first <- autoplot.zoo(yelp)
first
baseplot <- autoplot.zoo(yelp)
baseplot
first <- baseplot + geom_line(aes(fit_ar_f2$fitted))
first
plot(fit_ar_f2,include=100)
autoplot(fit_ar_f2)
fit_ar_f2
fit_ar_f2 = forecast(fit_ar2,h=6)
fit_ar_f2
autoplot(fit_ar_f2)
link1 <- "https://raw.githubusercontent.com/williamrshepherd/TimeSeriesProject/master/data/reviews_over_time.csv"
download.file(link1,destfile="actual.csv",method="libcurl")
actual <- read.csv(file="actual.csv",header=TRUE)
plot1 <- autoplot(fit_ar_f2)
plot12 <- plot1 + geom_line(aes(y=actual$reviews),col='red')
plot12
plot12 <- plot1 + geom_line(aes(y=actual$reviews,x=actual$reviewDate),col='red')
plot12
plot12 <- plot1 + geom_line(aes(actual),col='red')
plot12
actual.ts <- ts(actual)
actual.ts
plot12 <- plot1 + geom_line(aes(actual.ts),col='red')
plot12
plot12 <- plot1 + geom_line(aes(actual.ts$reviews),col='red')
plot12
plot12 <- plot1 + geom_line(aes(actual.ts[,2]),col='red')
plot12
plot12 <- plot1 + geom_line(aes(y=actual.ts[,2]),col='red')
plot12
actual
actual.end <- actual
actual.end[141,] <- NULL
actual.end <- actual[-141,]
actual.end
actual.ts <- ts(actual.end)
plot12 <- plot1 + geom_line(aes(y=actual.ts[,2]),col='red')
plot12
plot12 <- plot1 + geom_line(data=actual.end,aes(x=actual.end$reviewDate, y=actual.end$reviews,col='red'))
plot12
plot12 <- plot1 + geom_line(data=actual.ts,aes(x=actual.ts[,1], y=actual.ts[,2],col='red'))
plot12
str(plot1)
length(yelp)
length(fit_ar_f2)
length(fit_ar_f2$fitted)
fit_ar_f2
fit_ar_f2$model
fit_ar_f2$x
str(fit_ar_f2)
fit_ar_f2$fitted
fit_ar_f2$level
fit_ar_f2$lower
fit_ar_f2$Forecast
fit_ar_f2$model$x
fit_ar_f2$x
fit_ar_f2$mean
prediction_row <- fit_ar_f2$mean
prediction_row <- fit_ar_f2$mean
actualsrows <- fit_ar_f2$x
test <- rbind(actualsrows,prediction_row)
str(fit_ar_f2$xname)
str(fit_ar_f2$x)
str(fit_ar_f2$mean)
prediction2.ts <- ts.union(fit_ar_f2$x,fit_ar_f2$mean)
str(fit_ar_f2$lower)
fit_ar_f2$lower[1,]
fit_ar_f2$lower[,1]
lower80 <- ts.union(fit_ar_f2$x,fit_ar_f2$lower[,1])
fit_ar_f2$lower
str(fit_ar_f2)
autoplot(fit_ar_f2)
actual <- as.data.frame(actual)
actual_forzoo <- actual
actual_forzoo$reviewDate <- as.yearmon(actual_forzoo$reviewDate)
actual <- zoo(actual_forzoo$reviews,actual_forzoo$reviewDate)
autoplot(fit_ar_f2) + geom_line(data=actual)
autoplot(fit_ar_f2) + geom_line(data=actual,aes(x=reviews))
autoplot(fit_ar_f2) + geom_line(actual)
autoplot(fit_ar_f2) + geom_line(actual,aes(x=reviews))
autoplot(fit_ar_f2) + geom_line(actual,aes(x=xv))
autoplot(fit_ar_f2) + geom_line(actual,aes(x=actual))
autoplot(fit_ar_f2) + geom_line(actual,aes(y=actual))
funggcast(yelp,fit_ar_f2)
library(reshape)
library(reshape2)
library(forecast)
funggcast(yelp,fit_ar_f2)
?funggcast
??funggcast
install.packages('forecast')
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
library(forecast)
